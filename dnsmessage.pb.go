//
// This file describes the message format used by the protobuf logging feature in PowerDNS and dnsdist.
//
// MIT License
//
// Copyright (c) 2016-now PowerDNS.COM B.V. and its contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: dnsmessage.proto

package powerdns_protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PBDNSMessage_Type int32

const (
	PBDNSMessage_DNSQueryType            PBDNSMessage_Type = 1 // Query received by the service
	PBDNSMessage_DNSResponseType         PBDNSMessage_Type = 2 // Response returned by the service
	PBDNSMessage_DNSOutgoingQueryType    PBDNSMessage_Type = 3 // Query sent out by the service to a remote server
	PBDNSMessage_DNSIncomingResponseType PBDNSMessage_Type = 4 // Response returned by the remote server
)

// Enum value maps for PBDNSMessage_Type.
var (
	PBDNSMessage_Type_name = map[int32]string{
		1: "DNSQueryType",
		2: "DNSResponseType",
		3: "DNSOutgoingQueryType",
		4: "DNSIncomingResponseType",
	}
	PBDNSMessage_Type_value = map[string]int32{
		"DNSQueryType":            1,
		"DNSResponseType":         2,
		"DNSOutgoingQueryType":    3,
		"DNSIncomingResponseType": 4,
	}
)

func (x PBDNSMessage_Type) Enum() *PBDNSMessage_Type {
	p := new(PBDNSMessage_Type)
	*p = x
	return p
}

func (x PBDNSMessage_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PBDNSMessage_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_dnsmessage_proto_enumTypes[0].Descriptor()
}

func (PBDNSMessage_Type) Type() protoreflect.EnumType {
	return &file_dnsmessage_proto_enumTypes[0]
}

func (x PBDNSMessage_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PBDNSMessage_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PBDNSMessage_Type(num)
	return nil
}

// Deprecated: Use PBDNSMessage_Type.Descriptor instead.
func (PBDNSMessage_Type) EnumDescriptor() ([]byte, []int) {
	return file_dnsmessage_proto_rawDescGZIP(), []int{0, 0}
}

type PBDNSMessage_SocketFamily int32

const (
	PBDNSMessage_INET  PBDNSMessage_SocketFamily = 1 // IPv4 (RFC 791)
	PBDNSMessage_INET6 PBDNSMessage_SocketFamily = 2 // IPv6 (RFC 2460)
)

// Enum value maps for PBDNSMessage_SocketFamily.
var (
	PBDNSMessage_SocketFamily_name = map[int32]string{
		1: "INET",
		2: "INET6",
	}
	PBDNSMessage_SocketFamily_value = map[string]int32{
		"INET":  1,
		"INET6": 2,
	}
)

func (x PBDNSMessage_SocketFamily) Enum() *PBDNSMessage_SocketFamily {
	p := new(PBDNSMessage_SocketFamily)
	*p = x
	return p
}

func (x PBDNSMessage_SocketFamily) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PBDNSMessage_SocketFamily) Descriptor() protoreflect.EnumDescriptor {
	return file_dnsmessage_proto_enumTypes[1].Descriptor()
}

func (PBDNSMessage_SocketFamily) Type() protoreflect.EnumType {
	return &file_dnsmessage_proto_enumTypes[1]
}

func (x PBDNSMessage_SocketFamily) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PBDNSMessage_SocketFamily) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PBDNSMessage_SocketFamily(num)
	return nil
}

// Deprecated: Use PBDNSMessage_SocketFamily.Descriptor instead.
func (PBDNSMessage_SocketFamily) EnumDescriptor() ([]byte, []int) {
	return file_dnsmessage_proto_rawDescGZIP(), []int{0, 1}
}

type PBDNSMessage_SocketProtocol int32

const (
	PBDNSMessage_UDP         PBDNSMessage_SocketProtocol = 1 // User Datagram Protocol (RFC 768)
	PBDNSMessage_TCP         PBDNSMessage_SocketProtocol = 2 // Transmission Control Protocol (RFC 793)
	PBDNSMessage_DOT         PBDNSMessage_SocketProtocol = 3 // DNS over TLS (RFC 7858)
	PBDNSMessage_DOH         PBDNSMessage_SocketProtocol = 4 // DNS over HTTPS (RFC 8484)
	PBDNSMessage_DNSCryptUDP PBDNSMessage_SocketProtocol = 5 // DNSCrypt over UDP (https://dnscrypt.info/protocol)
	PBDNSMessage_DNSCryptTCP PBDNSMessage_SocketProtocol = 6 // DNSCrypt over TCP (https://dnscrypt.info/protocol)
	PBDNSMessage_DOQ         PBDNSMessage_SocketProtocol = 7 // DNS over QUIC (RFC 9250)
)

// Enum value maps for PBDNSMessage_SocketProtocol.
var (
	PBDNSMessage_SocketProtocol_name = map[int32]string{
		1: "UDP",
		2: "TCP",
		3: "DOT",
		4: "DOH",
		5: "DNSCryptUDP",
		6: "DNSCryptTCP",
		7: "DOQ",
	}
	PBDNSMessage_SocketProtocol_value = map[string]int32{
		"UDP":         1,
		"TCP":         2,
		"DOT":         3,
		"DOH":         4,
		"DNSCryptUDP": 5,
		"DNSCryptTCP": 6,
		"DOQ":         7,
	}
)

func (x PBDNSMessage_SocketProtocol) Enum() *PBDNSMessage_SocketProtocol {
	p := new(PBDNSMessage_SocketProtocol)
	*p = x
	return p
}

func (x PBDNSMessage_SocketProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PBDNSMessage_SocketProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_dnsmessage_proto_enumTypes[2].Descriptor()
}

func (PBDNSMessage_SocketProtocol) Type() protoreflect.EnumType {
	return &file_dnsmessage_proto_enumTypes[2]
}

func (x PBDNSMessage_SocketProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PBDNSMessage_SocketProtocol) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PBDNSMessage_SocketProtocol(num)
	return nil
}

// Deprecated: Use PBDNSMessage_SocketProtocol.Descriptor instead.
func (PBDNSMessage_SocketProtocol) EnumDescriptor() ([]byte, []int) {
	return file_dnsmessage_proto_rawDescGZIP(), []int{0, 2}
}

type PBDNSMessage_HTTPVersion int32

const (
	PBDNSMessage_HTTP1 PBDNSMessage_HTTPVersion = 1 // HTTP/1.1
	PBDNSMessage_HTTP2 PBDNSMessage_HTTPVersion = 2 // HTTP/2
	PBDNSMessage_HTTP3 PBDNSMessage_HTTPVersion = 3 // HTTP/3
)

// Enum value maps for PBDNSMessage_HTTPVersion.
var (
	PBDNSMessage_HTTPVersion_name = map[int32]string{
		1: "HTTP1",
		2: "HTTP2",
		3: "HTTP3",
	}
	PBDNSMessage_HTTPVersion_value = map[string]int32{
		"HTTP1": 1,
		"HTTP2": 2,
		"HTTP3": 3,
	}
)

func (x PBDNSMessage_HTTPVersion) Enum() *PBDNSMessage_HTTPVersion {
	p := new(PBDNSMessage_HTTPVersion)
	*p = x
	return p
}

func (x PBDNSMessage_HTTPVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PBDNSMessage_HTTPVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_dnsmessage_proto_enumTypes[3].Descriptor()
}

func (PBDNSMessage_HTTPVersion) Type() protoreflect.EnumType {
	return &file_dnsmessage_proto_enumTypes[3]
}

func (x PBDNSMessage_HTTPVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PBDNSMessage_HTTPVersion) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PBDNSMessage_HTTPVersion(num)
	return nil
}

// Deprecated: Use PBDNSMessage_HTTPVersion.Descriptor instead.
func (PBDNSMessage_HTTPVersion) EnumDescriptor() ([]byte, []int) {
	return file_dnsmessage_proto_rawDescGZIP(), []int{0, 3}
}

type PBDNSMessage_PolicyType int32

const (
	PBDNSMessage_UNKNOWN    PBDNSMessage_PolicyType = 1 // No RPZ policy applied, or unknown type
	PBDNSMessage_QNAME      PBDNSMessage_PolicyType = 2 // Policy matched on the QName
	PBDNSMessage_CLIENTIP   PBDNSMessage_PolicyType = 3 // Policy matched on the client IP
	PBDNSMessage_RESPONSEIP PBDNSMessage_PolicyType = 4 // Policy matched on one of the IPs contained in the answer
	PBDNSMessage_NSDNAME    PBDNSMessage_PolicyType = 5 // Policy matched on the name of one nameserver involved
	PBDNSMessage_NSIP       PBDNSMessage_PolicyType = 6 // Policy matched on the IP of one nameserver involved
)

// Enum value maps for PBDNSMessage_PolicyType.
var (
	PBDNSMessage_PolicyType_name = map[int32]string{
		1: "UNKNOWN",
		2: "QNAME",
		3: "CLIENTIP",
		4: "RESPONSEIP",
		5: "NSDNAME",
		6: "NSIP",
	}
	PBDNSMessage_PolicyType_value = map[string]int32{
		"UNKNOWN":    1,
		"QNAME":      2,
		"CLIENTIP":   3,
		"RESPONSEIP": 4,
		"NSDNAME":    5,
		"NSIP":       6,
	}
)

func (x PBDNSMessage_PolicyType) Enum() *PBDNSMessage_PolicyType {
	p := new(PBDNSMessage_PolicyType)
	*p = x
	return p
}

func (x PBDNSMessage_PolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PBDNSMessage_PolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_dnsmessage_proto_enumTypes[4].Descriptor()
}

func (PBDNSMessage_PolicyType) Type() protoreflect.EnumType {
	return &file_dnsmessage_proto_enumTypes[4]
}

func (x PBDNSMessage_PolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PBDNSMessage_PolicyType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PBDNSMessage_PolicyType(num)
	return nil
}

// Deprecated: Use PBDNSMessage_PolicyType.Descriptor instead.
func (PBDNSMessage_PolicyType) EnumDescriptor() ([]byte, []int) {
	return file_dnsmessage_proto_rawDescGZIP(), []int{0, 4}
}

type PBDNSMessage_PolicyKind int32

const (
	PBDNSMessage_NoAction PBDNSMessage_PolicyKind = 1 // No action taken
	PBDNSMessage_Drop     PBDNSMessage_PolicyKind = 2 // https://tools.ietf.org/html/draft-vixie-dns-rpz-04 3.4
	PBDNSMessage_NXDOMAIN PBDNSMessage_PolicyKind = 3 // https://tools.ietf.org/html/draft-vixie-dns-rpz-04 3.1
	PBDNSMessage_NODATA   PBDNSMessage_PolicyKind = 4 // https://tools.ietf.org/html/draft-vixie-dns-rpz-04 3.2
	PBDNSMessage_Truncate PBDNSMessage_PolicyKind = 5 // https://tools.ietf.org/html/draft-vixie-dns-rpz-04 3.5
	PBDNSMessage_Custom   PBDNSMessage_PolicyKind = 6 // https://tools.ietf.org/html/draft-vixie-dns-rpz-04 3.6
)

// Enum value maps for PBDNSMessage_PolicyKind.
var (
	PBDNSMessage_PolicyKind_name = map[int32]string{
		1: "NoAction",
		2: "Drop",
		3: "NXDOMAIN",
		4: "NODATA",
		5: "Truncate",
		6: "Custom",
	}
	PBDNSMessage_PolicyKind_value = map[string]int32{
		"NoAction": 1,
		"Drop":     2,
		"NXDOMAIN": 3,
		"NODATA":   4,
		"Truncate": 5,
		"Custom":   6,
	}
)

func (x PBDNSMessage_PolicyKind) Enum() *PBDNSMessage_PolicyKind {
	p := new(PBDNSMessage_PolicyKind)
	*p = x
	return p
}

func (x PBDNSMessage_PolicyKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PBDNSMessage_PolicyKind) Descriptor() protoreflect.EnumDescriptor {
	return file_dnsmessage_proto_enumTypes[5].Descriptor()
}

func (PBDNSMessage_PolicyKind) Type() protoreflect.EnumType {
	return &file_dnsmessage_proto_enumTypes[5]
}

func (x PBDNSMessage_PolicyKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PBDNSMessage_PolicyKind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PBDNSMessage_PolicyKind(num)
	return nil
}

// Deprecated: Use PBDNSMessage_PolicyKind.Descriptor instead.
func (PBDNSMessage_PolicyKind) EnumDescriptor() ([]byte, []int) {
	return file_dnsmessage_proto_rawDescGZIP(), []int{0, 5}
}

type PBDNSMessage_VState int32

const (
	PBDNSMessage_Indeterminate                  PBDNSMessage_VState = 1
	PBDNSMessage_Insecure                       PBDNSMessage_VState = 2
	PBDNSMessage_Secure                         PBDNSMessage_VState = 3
	PBDNSMessage_BogusNoValidDNSKEY             PBDNSMessage_VState = 4
	PBDNSMessage_BogusInvalidDenial             PBDNSMessage_VState = 5
	PBDNSMessage_BogusUnableToGetDSs            PBDNSMessage_VState = 6
	PBDNSMessage_BogusUnableToGetDNSKEYs        PBDNSMessage_VState = 7
	PBDNSMessage_BogusSelfSignedDS              PBDNSMessage_VState = 8
	PBDNSMessage_BogusNoRRSIG                   PBDNSMessage_VState = 9
	PBDNSMessage_BogusNoValidRRSIG              PBDNSMessage_VState = 10
	PBDNSMessage_BogusMissingNegativeIndication PBDNSMessage_VState = 11
	PBDNSMessage_BogusSignatureNotYetValid      PBDNSMessage_VState = 12
	PBDNSMessage_BogusSignatureExpired          PBDNSMessage_VState = 13
	PBDNSMessage_BogusUnsupportedDNSKEYAlgo     PBDNSMessage_VState = 14
	PBDNSMessage_BogusUnsupportedDSDigestType   PBDNSMessage_VState = 15
	PBDNSMessage_BogusNoZoneKeyBitSet           PBDNSMessage_VState = 16
	PBDNSMessage_BogusRevokedDNSKEY             PBDNSMessage_VState = 17
	PBDNSMessage_BogusInvalidDNSKEYProtocol     PBDNSMessage_VState = 18
)

// Enum value maps for PBDNSMessage_VState.
var (
	PBDNSMessage_VState_name = map[int32]string{
		1:  "Indeterminate",
		2:  "Insecure",
		3:  "Secure",
		4:  "BogusNoValidDNSKEY",
		5:  "BogusInvalidDenial",
		6:  "BogusUnableToGetDSs",
		7:  "BogusUnableToGetDNSKEYs",
		8:  "BogusSelfSignedDS",
		9:  "BogusNoRRSIG",
		10: "BogusNoValidRRSIG",
		11: "BogusMissingNegativeIndication",
		12: "BogusSignatureNotYetValid",
		13: "BogusSignatureExpired",
		14: "BogusUnsupportedDNSKEYAlgo",
		15: "BogusUnsupportedDSDigestType",
		16: "BogusNoZoneKeyBitSet",
		17: "BogusRevokedDNSKEY",
		18: "BogusInvalidDNSKEYProtocol",
	}
	PBDNSMessage_VState_value = map[string]int32{
		"Indeterminate":                  1,
		"Insecure":                       2,
		"Secure":                         3,
		"BogusNoValidDNSKEY":             4,
		"BogusInvalidDenial":             5,
		"BogusUnableToGetDSs":            6,
		"BogusUnableToGetDNSKEYs":        7,
		"BogusSelfSignedDS":              8,
		"BogusNoRRSIG":                   9,
		"BogusNoValidRRSIG":              10,
		"BogusMissingNegativeIndication": 11,
		"BogusSignatureNotYetValid":      12,
		"BogusSignatureExpired":          13,
		"BogusUnsupportedDNSKEYAlgo":     14,
		"BogusUnsupportedDSDigestType":   15,
		"BogusNoZoneKeyBitSet":           16,
		"BogusRevokedDNSKEY":             17,
		"BogusInvalidDNSKEYProtocol":     18,
	}
)

func (x PBDNSMessage_VState) Enum() *PBDNSMessage_VState {
	p := new(PBDNSMessage_VState)
	*p = x
	return p
}

func (x PBDNSMessage_VState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PBDNSMessage_VState) Descriptor() protoreflect.EnumDescriptor {
	return file_dnsmessage_proto_enumTypes[6].Descriptor()
}

func (PBDNSMessage_VState) Type() protoreflect.EnumType {
	return &file_dnsmessage_proto_enumTypes[6]
}

func (x PBDNSMessage_VState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PBDNSMessage_VState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PBDNSMessage_VState(num)
	return nil
}

// Deprecated: Use PBDNSMessage_VState.Descriptor instead.
func (PBDNSMessage_VState) EnumDescriptor() ([]byte, []int) {
	return file_dnsmessage_proto_rawDescGZIP(), []int{0, 6}
}

// The well known EventTrace event numbers
type PBDNSMessage_EventType int32

const (
	// Range 0..99: Generic events
	PBDNSMessage_CustomEvent PBDNSMessage_EventType = 0 // A custom event
	PBDNSMessage_ReqRecv     PBDNSMessage_EventType = 1 // A request was received
	PBDNSMessage_PCacheCheck PBDNSMessage_EventType = 2 // A packet cache check was initiated or completed; value: bool cacheHit
	PBDNSMessage_AnswerSent  PBDNSMessage_EventType = 3 // An answer was sent to the client
	// Range 100: Recursor events
	PBDNSMessage_SyncRes           PBDNSMessage_EventType = 100 // Recursor Syncres main function has started or completed; value: int rcode
	PBDNSMessage_LuaGetTag         PBDNSMessage_EventType = 101 // Events below mark start or end of Lua hook calls; value: return value of hook
	PBDNSMessage_LuaGetTagFFI      PBDNSMessage_EventType = 102
	PBDNSMessage_LuaIPFilter       PBDNSMessage_EventType = 103
	PBDNSMessage_LuaPreRPZ         PBDNSMessage_EventType = 104
	PBDNSMessage_LuaPreResolve     PBDNSMessage_EventType = 105
	PBDNSMessage_LuaPreOutQuery    PBDNSMessage_EventType = 106
	PBDNSMessage_LuaPostResolve    PBDNSMessage_EventType = 107
	PBDNSMessage_LuaNoData         PBDNSMessage_EventType = 108
	PBDNSMessage_LuaNXDomain       PBDNSMessage_EventType = 109
	PBDNSMessage_LuaPostResolveFFI PBDNSMessage_EventType = 110
)

// Enum value maps for PBDNSMessage_EventType.
var (
	PBDNSMessage_EventType_name = map[int32]string{
		0:   "CustomEvent",
		1:   "ReqRecv",
		2:   "PCacheCheck",
		3:   "AnswerSent",
		100: "SyncRes",
		101: "LuaGetTag",
		102: "LuaGetTagFFI",
		103: "LuaIPFilter",
		104: "LuaPreRPZ",
		105: "LuaPreResolve",
		106: "LuaPreOutQuery",
		107: "LuaPostResolve",
		108: "LuaNoData",
		109: "LuaNXDomain",
		110: "LuaPostResolveFFI",
	}
	PBDNSMessage_EventType_value = map[string]int32{
		"CustomEvent":       0,
		"ReqRecv":           1,
		"PCacheCheck":       2,
		"AnswerSent":        3,
		"SyncRes":           100,
		"LuaGetTag":         101,
		"LuaGetTagFFI":      102,
		"LuaIPFilter":       103,
		"LuaPreRPZ":         104,
		"LuaPreResolve":     105,
		"LuaPreOutQuery":    106,
		"LuaPostResolve":    107,
		"LuaNoData":         108,
		"LuaNXDomain":       109,
		"LuaPostResolveFFI": 110,
	}
)

func (x PBDNSMessage_EventType) Enum() *PBDNSMessage_EventType {
	p := new(PBDNSMessage_EventType)
	*p = x
	return p
}

func (x PBDNSMessage_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PBDNSMessage_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_dnsmessage_proto_enumTypes[7].Descriptor()
}

func (PBDNSMessage_EventType) Type() protoreflect.EnumType {
	return &file_dnsmessage_proto_enumTypes[7]
}

func (x PBDNSMessage_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *PBDNSMessage_EventType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = PBDNSMessage_EventType(num)
	return nil
}

// Deprecated: Use PBDNSMessage_EventType.Descriptor instead.
func (PBDNSMessage_EventType) EnumDescriptor() ([]byte, []int) {
	return file_dnsmessage_proto_rawDescGZIP(), []int{0, 7}
}

type PBDNSMessage struct {
	state                   protoimpl.MessageState       `protogen:"open.v1"`
	Type                    *PBDNSMessage_Type           `protobuf:"varint,1,req,name=type,enum=PBDNSMessage_Type" json:"type,omitempty"` // Type of event
	MessageId               []byte                       `protobuf:"bytes,2,opt,name=messageId" json:"messageId,omitempty"`               // UUID, shared by the query and the response
	ServerIdentity          []byte                       `protobuf:"bytes,3,opt,name=serverIdentity" json:"serverIdentity,omitempty"`     // ID of the server emitting the protobuf message
	SocketFamily            *PBDNSMessage_SocketFamily   `protobuf:"varint,4,opt,name=socketFamily,enum=PBDNSMessage_SocketFamily" json:"socketFamily,omitempty"`
	SocketProtocol          *PBDNSMessage_SocketProtocol `protobuf:"varint,5,opt,name=socketProtocol,enum=PBDNSMessage_SocketProtocol" json:"socketProtocol,omitempty"`
	From                    []byte                       `protobuf:"bytes,6,opt,name=from" json:"from,omitempty"`           // DNS requestor (client) as 4 (IPv4) or 16 (IPv6) raw bytes in network byte order
	To                      []byte                       `protobuf:"bytes,7,opt,name=to" json:"to,omitempty"`               // DNS responder (server) as 4 (IPv4) or 16 (IPv6) raw bytes in network byte order
	InBytes                 *uint64                      `protobuf:"varint,8,opt,name=inBytes" json:"inBytes,omitempty"`    // Size of the query or response on the wire
	TimeSec                 *uint32                      `protobuf:"varint,9,opt,name=timeSec" json:"timeSec,omitempty"`    // Time of message reception (seconds since epoch)
	TimeUsec                *uint32                      `protobuf:"varint,10,opt,name=timeUsec" json:"timeUsec,omitempty"` // Time of message reception (additional micro-seconds)
	Id                      *uint32                      `protobuf:"varint,11,opt,name=id" json:"id,omitempty"`             // ID of the query/response as found in the DNS header
	Question                *PBDNSMessage_DNSQuestion    `protobuf:"bytes,12,opt,name=question" json:"question,omitempty"`  // DNS query received from client
	Response                *PBDNSMessage_DNSResponse    `protobuf:"bytes,13,opt,name=response" json:"response,omitempty"`
	OriginalRequestorSubnet []byte                       `protobuf:"bytes,14,opt,name=originalRequestorSubnet" json:"originalRequestorSubnet,omitempty"` // EDNS Client Subnet value (4 or 16 raw bytes in network byte order)
	RequestorId             *string                      `protobuf:"bytes,15,opt,name=requestorId" json:"requestorId,omitempty"`                         // Username of the requestor
	InitialRequestId        []byte                       `protobuf:"bytes,16,opt,name=initialRequestId" json:"initialRequestId,omitempty"`               // UUID of the incoming query that initiated this outgoing query or incoming response
	DeviceId                []byte                       `protobuf:"bytes,17,opt,name=deviceId" json:"deviceId,omitempty"`                               // Device ID of the requestor (could be mac address IP address or e.g. IMEI, format implementation dependent)
	NewlyObservedDomain     *bool                        `protobuf:"varint,18,opt,name=newlyObservedDomain" json:"newlyObservedDomain,omitempty"`        // True if the domain has not been seen before
	DeviceName              *string                      `protobuf:"bytes,19,opt,name=deviceName" json:"deviceName,omitempty"`                           // Device name of the requestor
	FromPort                *uint32                      `protobuf:"varint,20,opt,name=fromPort" json:"fromPort,omitempty"`                              // Source port of the DNS query (client)
	ToPort                  *uint32                      `protobuf:"varint,21,opt,name=toPort" json:"toPort,omitempty"`                                  // Destination port of the DNS query (server)
	Meta                    []*PBDNSMessage_Meta         `protobuf:"bytes,22,rep,name=meta" json:"meta,omitempty"`                                       // Arbitrary meta-data - to be used in future rather than adding new fields all the time
	Trace                   []*PBDNSMessage_Event        `protobuf:"bytes,23,rep,name=trace" json:"trace,omitempty"`
	HttpVersion             *PBDNSMessage_HTTPVersion    `protobuf:"varint,24,opt,name=httpVersion,enum=PBDNSMessage_HTTPVersion" json:"httpVersion,omitempty"` // HTTP version used for DNS over HTTP
	WorkerId                *uint64                      `protobuf:"varint,25,opt,name=workerId" json:"workerId,omitempty"`                                     // Thread id
	PacketCacheHit          *bool                        `protobuf:"varint,26,opt,name=packetCacheHit" json:"packetCacheHit,omitempty"`                         // Was it a packet cache hit?
	OutgoingQueries         *uint32                      `protobuf:"varint,27,opt,name=outgoingQueries" json:"outgoingQueries,omitempty"`                       // Number of outgoing queries used to answer the query
	HeaderFlags             *uint32                      `protobuf:"varint,28,opt,name=headerFlags" json:"headerFlags,omitempty"`                               // Flags field in wire format, 16 bits used
	EdnsVersion             *uint32                      `protobuf:"varint,29,opt,name=ednsVersion" json:"ednsVersion,omitempty"`                               // EDNS version and flags in wire format, see https://www.rfc-editor.org/rfc/rfc6891.html#section-6.1.3
	OpenTelemetryData       []byte                       `protobuf:"bytes,30,opt,name=openTelemetryData" json:"openTelemetryData,omitempty"`                    // Protobuf encoded Open Telemetry Data, see https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/trace/v1/trace.proto
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *PBDNSMessage) Reset() {
	*x = PBDNSMessage{}
	mi := &file_dnsmessage_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PBDNSMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBDNSMessage) ProtoMessage() {}

func (x *PBDNSMessage) ProtoReflect() protoreflect.Message {
	mi := &file_dnsmessage_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBDNSMessage.ProtoReflect.Descriptor instead.
func (*PBDNSMessage) Descriptor() ([]byte, []int) {
	return file_dnsmessage_proto_rawDescGZIP(), []int{0}
}

func (x *PBDNSMessage) GetType() PBDNSMessage_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return PBDNSMessage_DNSQueryType
}

func (x *PBDNSMessage) GetMessageId() []byte {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *PBDNSMessage) GetServerIdentity() []byte {
	if x != nil {
		return x.ServerIdentity
	}
	return nil
}

func (x *PBDNSMessage) GetSocketFamily() PBDNSMessage_SocketFamily {
	if x != nil && x.SocketFamily != nil {
		return *x.SocketFamily
	}
	return PBDNSMessage_INET
}

func (x *PBDNSMessage) GetSocketProtocol() PBDNSMessage_SocketProtocol {
	if x != nil && x.SocketProtocol != nil {
		return *x.SocketProtocol
	}
	return PBDNSMessage_UDP
}

func (x *PBDNSMessage) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *PBDNSMessage) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *PBDNSMessage) GetInBytes() uint64 {
	if x != nil && x.InBytes != nil {
		return *x.InBytes
	}
	return 0
}

func (x *PBDNSMessage) GetTimeSec() uint32 {
	if x != nil && x.TimeSec != nil {
		return *x.TimeSec
	}
	return 0
}

func (x *PBDNSMessage) GetTimeUsec() uint32 {
	if x != nil && x.TimeUsec != nil {
		return *x.TimeUsec
	}
	return 0
}

func (x *PBDNSMessage) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PBDNSMessage) GetQuestion() *PBDNSMessage_DNSQuestion {
	if x != nil {
		return x.Question
	}
	return nil
}

func (x *PBDNSMessage) GetResponse() *PBDNSMessage_DNSResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *PBDNSMessage) GetOriginalRequestorSubnet() []byte {
	if x != nil {
		return x.OriginalRequestorSubnet
	}
	return nil
}

func (x *PBDNSMessage) GetRequestorId() string {
	if x != nil && x.RequestorId != nil {
		return *x.RequestorId
	}
	return ""
}

func (x *PBDNSMessage) GetInitialRequestId() []byte {
	if x != nil {
		return x.InitialRequestId
	}
	return nil
}

func (x *PBDNSMessage) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *PBDNSMessage) GetNewlyObservedDomain() bool {
	if x != nil && x.NewlyObservedDomain != nil {
		return *x.NewlyObservedDomain
	}
	return false
}

func (x *PBDNSMessage) GetDeviceName() string {
	if x != nil && x.DeviceName != nil {
		return *x.DeviceName
	}
	return ""
}

func (x *PBDNSMessage) GetFromPort() uint32 {
	if x != nil && x.FromPort != nil {
		return *x.FromPort
	}
	return 0
}

func (x *PBDNSMessage) GetToPort() uint32 {
	if x != nil && x.ToPort != nil {
		return *x.ToPort
	}
	return 0
}

func (x *PBDNSMessage) GetMeta() []*PBDNSMessage_Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *PBDNSMessage) GetTrace() []*PBDNSMessage_Event {
	if x != nil {
		return x.Trace
	}
	return nil
}

func (x *PBDNSMessage) GetHttpVersion() PBDNSMessage_HTTPVersion {
	if x != nil && x.HttpVersion != nil {
		return *x.HttpVersion
	}
	return PBDNSMessage_HTTP1
}

func (x *PBDNSMessage) GetWorkerId() uint64 {
	if x != nil && x.WorkerId != nil {
		return *x.WorkerId
	}
	return 0
}

func (x *PBDNSMessage) GetPacketCacheHit() bool {
	if x != nil && x.PacketCacheHit != nil {
		return *x.PacketCacheHit
	}
	return false
}

func (x *PBDNSMessage) GetOutgoingQueries() uint32 {
	if x != nil && x.OutgoingQueries != nil {
		return *x.OutgoingQueries
	}
	return 0
}

func (x *PBDNSMessage) GetHeaderFlags() uint32 {
	if x != nil && x.HeaderFlags != nil {
		return *x.HeaderFlags
	}
	return 0
}

func (x *PBDNSMessage) GetEdnsVersion() uint32 {
	if x != nil && x.EdnsVersion != nil {
		return *x.EdnsVersion
	}
	return 0
}

func (x *PBDNSMessage) GetOpenTelemetryData() []byte {
	if x != nil {
		return x.OpenTelemetryData
	}
	return nil
}

type PBDNSMessageList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Msg           []*PBDNSMessage        `protobuf:"bytes,1,rep,name=msg" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PBDNSMessageList) Reset() {
	*x = PBDNSMessageList{}
	mi := &file_dnsmessage_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PBDNSMessageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBDNSMessageList) ProtoMessage() {}

func (x *PBDNSMessageList) ProtoReflect() protoreflect.Message {
	mi := &file_dnsmessage_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBDNSMessageList.ProtoReflect.Descriptor instead.
func (*PBDNSMessageList) Descriptor() ([]byte, []int) {
	return file_dnsmessage_proto_rawDescGZIP(), []int{1}
}

func (x *PBDNSMessageList) GetMsg() []*PBDNSMessage {
	if x != nil {
		return x.Msg
	}
	return nil
}

type PBDNSMessage_DNSQuestion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QName         *string                `protobuf:"bytes,1,opt,name=qName" json:"qName,omitempty"`    // Fully qualified DNS name (with trailing dot)
	QType         *uint32                `protobuf:"varint,2,opt,name=qType" json:"qType,omitempty"`   // https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4
	QClass        *uint32                `protobuf:"varint,3,opt,name=qClass" json:"qClass,omitempty"` // Typically 1 (IN), see https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-2
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PBDNSMessage_DNSQuestion) Reset() {
	*x = PBDNSMessage_DNSQuestion{}
	mi := &file_dnsmessage_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PBDNSMessage_DNSQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBDNSMessage_DNSQuestion) ProtoMessage() {}

func (x *PBDNSMessage_DNSQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_dnsmessage_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBDNSMessage_DNSQuestion.ProtoReflect.Descriptor instead.
func (*PBDNSMessage_DNSQuestion) Descriptor() ([]byte, []int) {
	return file_dnsmessage_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PBDNSMessage_DNSQuestion) GetQName() string {
	if x != nil && x.QName != nil {
		return *x.QName
	}
	return ""
}

func (x *PBDNSMessage_DNSQuestion) GetQType() uint32 {
	if x != nil && x.QType != nil {
		return *x.QType
	}
	return 0
}

func (x *PBDNSMessage_DNSQuestion) GetQClass() uint32 {
	if x != nil && x.QClass != nil {
		return *x.QClass
	}
	return 0
}

type PBDNSMessage_DNSResponse struct {
	state                protoimpl.MessageState            `protogen:"open.v1"`
	Rcode                *uint32                           `protobuf:"varint,1,opt,name=rcode" json:"rcode,omitempty"`                                                       // DNS Response code, or 65536 for a network error including a timeout
	Rrs                  []*PBDNSMessage_DNSResponse_DNSRR `protobuf:"bytes,2,rep,name=rrs" json:"rrs,omitempty"`                                                            // DNS resource records in response
	AppliedPolicy        *string                           `protobuf:"bytes,3,opt,name=appliedPolicy" json:"appliedPolicy,omitempty"`                                        // Filtering policy (RPZ or Lua) applied
	Tags                 []string                          `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`                                                          // Additional tags applied
	QueryTimeSec         *uint32                           `protobuf:"varint,5,opt,name=queryTimeSec" json:"queryTimeSec,omitempty"`                                         // Time of the corresponding query reception (seconds since epoch)
	QueryTimeUsec        *uint32                           `protobuf:"varint,6,opt,name=queryTimeUsec" json:"queryTimeUsec,omitempty"`                                       // Time of the corresponding query reception (additional micro-seconds)
	AppliedPolicyType    *PBDNSMessage_PolicyType          `protobuf:"varint,7,opt,name=appliedPolicyType,enum=PBDNSMessage_PolicyType" json:"appliedPolicyType,omitempty"`  // Type of the filtering policy (RPZ or Lua) applied
	AppliedPolicyTrigger *string                           `protobuf:"bytes,8,opt,name=appliedPolicyTrigger" json:"appliedPolicyTrigger,omitempty"`                          // The RPZ trigger
	AppliedPolicyHit     *string                           `protobuf:"bytes,9,opt,name=appliedPolicyHit" json:"appliedPolicyHit,omitempty"`                                  // The value (qname or IP) that caused the hit
	AppliedPolicyKind    *PBDNSMessage_PolicyKind          `protobuf:"varint,10,opt,name=appliedPolicyKind,enum=PBDNSMessage_PolicyKind" json:"appliedPolicyKind,omitempty"` // The Kind (RPZ action) applied by the hit
	ValidationState      *PBDNSMessage_VState              `protobuf:"varint,11,opt,name=validationState,enum=PBDNSMessage_VState" json:"validationState,omitempty"`         // The DNSSEC Validation State
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *PBDNSMessage_DNSResponse) Reset() {
	*x = PBDNSMessage_DNSResponse{}
	mi := &file_dnsmessage_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PBDNSMessage_DNSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBDNSMessage_DNSResponse) ProtoMessage() {}

func (x *PBDNSMessage_DNSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dnsmessage_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBDNSMessage_DNSResponse.ProtoReflect.Descriptor instead.
func (*PBDNSMessage_DNSResponse) Descriptor() ([]byte, []int) {
	return file_dnsmessage_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PBDNSMessage_DNSResponse) GetRcode() uint32 {
	if x != nil && x.Rcode != nil {
		return *x.Rcode
	}
	return 0
}

func (x *PBDNSMessage_DNSResponse) GetRrs() []*PBDNSMessage_DNSResponse_DNSRR {
	if x != nil {
		return x.Rrs
	}
	return nil
}

func (x *PBDNSMessage_DNSResponse) GetAppliedPolicy() string {
	if x != nil && x.AppliedPolicy != nil {
		return *x.AppliedPolicy
	}
	return ""
}

func (x *PBDNSMessage_DNSResponse) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PBDNSMessage_DNSResponse) GetQueryTimeSec() uint32 {
	if x != nil && x.QueryTimeSec != nil {
		return *x.QueryTimeSec
	}
	return 0
}

func (x *PBDNSMessage_DNSResponse) GetQueryTimeUsec() uint32 {
	if x != nil && x.QueryTimeUsec != nil {
		return *x.QueryTimeUsec
	}
	return 0
}

func (x *PBDNSMessage_DNSResponse) GetAppliedPolicyType() PBDNSMessage_PolicyType {
	if x != nil && x.AppliedPolicyType != nil {
		return *x.AppliedPolicyType
	}
	return PBDNSMessage_UNKNOWN
}

func (x *PBDNSMessage_DNSResponse) GetAppliedPolicyTrigger() string {
	if x != nil && x.AppliedPolicyTrigger != nil {
		return *x.AppliedPolicyTrigger
	}
	return ""
}

func (x *PBDNSMessage_DNSResponse) GetAppliedPolicyHit() string {
	if x != nil && x.AppliedPolicyHit != nil {
		return *x.AppliedPolicyHit
	}
	return ""
}

func (x *PBDNSMessage_DNSResponse) GetAppliedPolicyKind() PBDNSMessage_PolicyKind {
	if x != nil && x.AppliedPolicyKind != nil {
		return *x.AppliedPolicyKind
	}
	return PBDNSMessage_NoAction
}

func (x *PBDNSMessage_DNSResponse) GetValidationState() PBDNSMessage_VState {
	if x != nil && x.ValidationState != nil {
		return *x.ValidationState
	}
	return PBDNSMessage_Indeterminate
}

type PBDNSMessage_MetaValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StringVal     []string               `protobuf:"bytes,1,rep,name=stringVal" json:"stringVal,omitempty"`
	IntVal        []int64                `protobuf:"varint,2,rep,name=intVal" json:"intVal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PBDNSMessage_MetaValue) Reset() {
	*x = PBDNSMessage_MetaValue{}
	mi := &file_dnsmessage_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PBDNSMessage_MetaValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBDNSMessage_MetaValue) ProtoMessage() {}

func (x *PBDNSMessage_MetaValue) ProtoReflect() protoreflect.Message {
	mi := &file_dnsmessage_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBDNSMessage_MetaValue.ProtoReflect.Descriptor instead.
func (*PBDNSMessage_MetaValue) Descriptor() ([]byte, []int) {
	return file_dnsmessage_proto_rawDescGZIP(), []int{0, 2}
}

func (x *PBDNSMessage_MetaValue) GetStringVal() []string {
	if x != nil {
		return x.StringVal
	}
	return nil
}

func (x *PBDNSMessage_MetaValue) GetIntVal() []int64 {
	if x != nil {
		return x.IntVal
	}
	return nil
}

type PBDNSMessage_Meta struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Key           *string                 `protobuf:"bytes,1,req,name=key" json:"key,omitempty"` // MUST be unique, so if you have multiple values they must be aggregated into one Meta
	Value         *PBDNSMessage_MetaValue `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PBDNSMessage_Meta) Reset() {
	*x = PBDNSMessage_Meta{}
	mi := &file_dnsmessage_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PBDNSMessage_Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBDNSMessage_Meta) ProtoMessage() {}

func (x *PBDNSMessage_Meta) ProtoReflect() protoreflect.Message {
	mi := &file_dnsmessage_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBDNSMessage_Meta.ProtoReflect.Descriptor instead.
func (*PBDNSMessage_Meta) Descriptor() ([]byte, []int) {
	return file_dnsmessage_proto_rawDescGZIP(), []int{0, 3}
}

func (x *PBDNSMessage_Meta) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *PBDNSMessage_Meta) GetValue() *PBDNSMessage_MetaValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type PBDNSMessage_Event struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Ts            *int64                  `protobuf:"varint,1,req,name=ts" json:"ts,omitempty"`                                   // Timestamp in ns relative to time of creation of event trace data structure
	Event         *PBDNSMessage_EventType `protobuf:"varint,2,req,name=event,enum=PBDNSMessage_EventType" json:"event,omitempty"` // Type of event
	Start         *bool                   `protobuf:"varint,3,req,name=start" json:"start,omitempty"`                             // true for "start" events, false for "completed" events
	BoolVal       *bool                   `protobuf:"varint,4,opt,name=boolVal" json:"boolVal,omitempty"`                         // Below are optional values associated with events
	IntVal        *int64                  `protobuf:"varint,5,opt,name=intVal" json:"intVal,omitempty"`
	StringVal     *string                 `protobuf:"bytes,6,opt,name=stringVal" json:"stringVal,omitempty"`
	BytesVal      []byte                  `protobuf:"bytes,7,opt,name=bytesVal" json:"bytesVal,omitempty"`
	Custom        *string                 `protobuf:"bytes,8,opt,name=custom" json:"custom,omitempty"` // The name of the event for custom events
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PBDNSMessage_Event) Reset() {
	*x = PBDNSMessage_Event{}
	mi := &file_dnsmessage_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PBDNSMessage_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBDNSMessage_Event) ProtoMessage() {}

func (x *PBDNSMessage_Event) ProtoReflect() protoreflect.Message {
	mi := &file_dnsmessage_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBDNSMessage_Event.ProtoReflect.Descriptor instead.
func (*PBDNSMessage_Event) Descriptor() ([]byte, []int) {
	return file_dnsmessage_proto_rawDescGZIP(), []int{0, 4}
}

func (x *PBDNSMessage_Event) GetTs() int64 {
	if x != nil && x.Ts != nil {
		return *x.Ts
	}
	return 0
}

func (x *PBDNSMessage_Event) GetEvent() PBDNSMessage_EventType {
	if x != nil && x.Event != nil {
		return *x.Event
	}
	return PBDNSMessage_CustomEvent
}

func (x *PBDNSMessage_Event) GetStart() bool {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return false
}

func (x *PBDNSMessage_Event) GetBoolVal() bool {
	if x != nil && x.BoolVal != nil {
		return *x.BoolVal
	}
	return false
}

func (x *PBDNSMessage_Event) GetIntVal() int64 {
	if x != nil && x.IntVal != nil {
		return *x.IntVal
	}
	return 0
}

func (x *PBDNSMessage_Event) GetStringVal() string {
	if x != nil && x.StringVal != nil {
		return *x.StringVal
	}
	return ""
}

func (x *PBDNSMessage_Event) GetBytesVal() []byte {
	if x != nil {
		return x.BytesVal
	}
	return nil
}

func (x *PBDNSMessage_Event) GetCustom() string {
	if x != nil && x.Custom != nil {
		return *x.Custom
	}
	return ""
}

// See exportTypes in https://docs.powerdns.com/recursor/lua-config/protobuf.html#protobufServer
// for the list of supported resource record types.
type PBDNSMessage_DNSResponse_DNSRR struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`    // Fully qualified DNS name (with trailing dot)
	Type          *uint32                `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`   // https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4
	Class         *uint32                `protobuf:"varint,3,opt,name=class" json:"class,omitempty"` // Typically 1 (IN), see https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-2
	Ttl           *uint32                `protobuf:"varint,4,opt,name=ttl" json:"ttl,omitempty"`     // TTL in seconds
	Rdata         []byte                 `protobuf:"bytes,5,opt,name=rdata" json:"rdata,omitempty"`  // raw address bytes in network byte order for A & AAAA; text representation for others, with fully qualified (trailing dot) domain names
	Udr           *bool                  `protobuf:"varint,6,opt,name=udr" json:"udr,omitempty"`     // True if this is the first time this RR has been seen for this question
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PBDNSMessage_DNSResponse_DNSRR) Reset() {
	*x = PBDNSMessage_DNSResponse_DNSRR{}
	mi := &file_dnsmessage_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PBDNSMessage_DNSResponse_DNSRR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PBDNSMessage_DNSResponse_DNSRR) ProtoMessage() {}

func (x *PBDNSMessage_DNSResponse_DNSRR) ProtoReflect() protoreflect.Message {
	mi := &file_dnsmessage_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PBDNSMessage_DNSResponse_DNSRR.ProtoReflect.Descriptor instead.
func (*PBDNSMessage_DNSResponse_DNSRR) Descriptor() ([]byte, []int) {
	return file_dnsmessage_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *PBDNSMessage_DNSResponse_DNSRR) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PBDNSMessage_DNSResponse_DNSRR) GetType() uint32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *PBDNSMessage_DNSResponse_DNSRR) GetClass() uint32 {
	if x != nil && x.Class != nil {
		return *x.Class
	}
	return 0
}

func (x *PBDNSMessage_DNSResponse_DNSRR) GetTtl() uint32 {
	if x != nil && x.Ttl != nil {
		return *x.Ttl
	}
	return 0
}

func (x *PBDNSMessage_DNSResponse_DNSRR) GetRdata() []byte {
	if x != nil {
		return x.Rdata
	}
	return nil
}

func (x *PBDNSMessage_DNSResponse_DNSRR) GetUdr() bool {
	if x != nil && x.Udr != nil {
		return *x.Udr
	}
	return false
}

var File_dnsmessage_proto protoreflect.FileDescriptor

const file_dnsmessage_proto_rawDesc = "" +
	"\n" +
	"\x10dnsmessage.proto\"\x8c\x1b\n" +
	"\fPBDNSMessage\x12&\n" +
	"\x04type\x18\x01 \x02(\x0e2\x12.PBDNSMessage.TypeR\x04type\x12\x1c\n" +
	"\tmessageId\x18\x02 \x01(\fR\tmessageId\x12&\n" +
	"\x0eserverIdentity\x18\x03 \x01(\fR\x0eserverIdentity\x12>\n" +
	"\fsocketFamily\x18\x04 \x01(\x0e2\x1a.PBDNSMessage.SocketFamilyR\fsocketFamily\x12D\n" +
	"\x0esocketProtocol\x18\x05 \x01(\x0e2\x1c.PBDNSMessage.SocketProtocolR\x0esocketProtocol\x12\x12\n" +
	"\x04from\x18\x06 \x01(\fR\x04from\x12\x0e\n" +
	"\x02to\x18\a \x01(\fR\x02to\x12\x18\n" +
	"\ainBytes\x18\b \x01(\x04R\ainBytes\x12\x18\n" +
	"\atimeSec\x18\t \x01(\rR\atimeSec\x12\x1a\n" +
	"\btimeUsec\x18\n" +
	" \x01(\rR\btimeUsec\x12\x0e\n" +
	"\x02id\x18\v \x01(\rR\x02id\x125\n" +
	"\bquestion\x18\f \x01(\v2\x19.PBDNSMessage.DNSQuestionR\bquestion\x125\n" +
	"\bresponse\x18\r \x01(\v2\x19.PBDNSMessage.DNSResponseR\bresponse\x128\n" +
	"\x17originalRequestorSubnet\x18\x0e \x01(\fR\x17originalRequestorSubnet\x12 \n" +
	"\vrequestorId\x18\x0f \x01(\tR\vrequestorId\x12*\n" +
	"\x10initialRequestId\x18\x10 \x01(\fR\x10initialRequestId\x12\x1a\n" +
	"\bdeviceId\x18\x11 \x01(\fR\bdeviceId\x120\n" +
	"\x13newlyObservedDomain\x18\x12 \x01(\bR\x13newlyObservedDomain\x12\x1e\n" +
	"\n" +
	"deviceName\x18\x13 \x01(\tR\n" +
	"deviceName\x12\x1a\n" +
	"\bfromPort\x18\x14 \x01(\rR\bfromPort\x12\x16\n" +
	"\x06toPort\x18\x15 \x01(\rR\x06toPort\x12&\n" +
	"\x04meta\x18\x16 \x03(\v2\x12.PBDNSMessage.MetaR\x04meta\x12)\n" +
	"\x05trace\x18\x17 \x03(\v2\x13.PBDNSMessage.EventR\x05trace\x12;\n" +
	"\vhttpVersion\x18\x18 \x01(\x0e2\x19.PBDNSMessage.HTTPVersionR\vhttpVersion\x12\x1a\n" +
	"\bworkerId\x18\x19 \x01(\x04R\bworkerId\x12&\n" +
	"\x0epacketCacheHit\x18\x1a \x01(\bR\x0epacketCacheHit\x12(\n" +
	"\x0foutgoingQueries\x18\x1b \x01(\rR\x0foutgoingQueries\x12 \n" +
	"\vheaderFlags\x18\x1c \x01(\rR\vheaderFlags\x12 \n" +
	"\vednsVersion\x18\x1d \x01(\rR\vednsVersion\x12,\n" +
	"\x11openTelemetryData\x18\x1e \x01(\fR\x11openTelemetryData\x1aQ\n" +
	"\vDNSQuestion\x12\x14\n" +
	"\x05qName\x18\x01 \x01(\tR\x05qName\x12\x14\n" +
	"\x05qType\x18\x02 \x01(\rR\x05qType\x12\x16\n" +
	"\x06qClass\x18\x03 \x01(\rR\x06qClass\x1a\x8b\x05\n" +
	"\vDNSResponse\x12\x14\n" +
	"\x05rcode\x18\x01 \x01(\rR\x05rcode\x121\n" +
	"\x03rrs\x18\x02 \x03(\v2\x1f.PBDNSMessage.DNSResponse.DNSRRR\x03rrs\x12$\n" +
	"\rappliedPolicy\x18\x03 \x01(\tR\rappliedPolicy\x12\x12\n" +
	"\x04tags\x18\x04 \x03(\tR\x04tags\x12\"\n" +
	"\fqueryTimeSec\x18\x05 \x01(\rR\fqueryTimeSec\x12$\n" +
	"\rqueryTimeUsec\x18\x06 \x01(\rR\rqueryTimeUsec\x12F\n" +
	"\x11appliedPolicyType\x18\a \x01(\x0e2\x18.PBDNSMessage.PolicyTypeR\x11appliedPolicyType\x122\n" +
	"\x14appliedPolicyTrigger\x18\b \x01(\tR\x14appliedPolicyTrigger\x12*\n" +
	"\x10appliedPolicyHit\x18\t \x01(\tR\x10appliedPolicyHit\x12F\n" +
	"\x11appliedPolicyKind\x18\n" +
	" \x01(\x0e2\x18.PBDNSMessage.PolicyKindR\x11appliedPolicyKind\x12>\n" +
	"\x0fvalidationState\x18\v \x01(\x0e2\x14.PBDNSMessage.VStateR\x0fvalidationState\x1a\x7f\n" +
	"\x05DNSRR\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04type\x18\x02 \x01(\rR\x04type\x12\x14\n" +
	"\x05class\x18\x03 \x01(\rR\x05class\x12\x10\n" +
	"\x03ttl\x18\x04 \x01(\rR\x03ttl\x12\x14\n" +
	"\x05rdata\x18\x05 \x01(\fR\x05rdata\x12\x10\n" +
	"\x03udr\x18\x06 \x01(\bR\x03udr\x1aA\n" +
	"\tMetaValue\x12\x1c\n" +
	"\tstringVal\x18\x01 \x03(\tR\tstringVal\x12\x16\n" +
	"\x06intVal\x18\x02 \x03(\x03R\x06intVal\x1aG\n" +
	"\x04Meta\x12\x10\n" +
	"\x03key\x18\x01 \x02(\tR\x03key\x12-\n" +
	"\x05value\x18\x02 \x02(\v2\x17.PBDNSMessage.MetaValueR\x05value\x1a\xe0\x01\n" +
	"\x05Event\x12\x0e\n" +
	"\x02ts\x18\x01 \x02(\x03R\x02ts\x12-\n" +
	"\x05event\x18\x02 \x02(\x0e2\x17.PBDNSMessage.EventTypeR\x05event\x12\x14\n" +
	"\x05start\x18\x03 \x02(\bR\x05start\x12\x18\n" +
	"\aboolVal\x18\x04 \x01(\bR\aboolVal\x12\x16\n" +
	"\x06intVal\x18\x05 \x01(\x03R\x06intVal\x12\x1c\n" +
	"\tstringVal\x18\x06 \x01(\tR\tstringVal\x12\x1a\n" +
	"\bbytesVal\x18\a \x01(\fR\bbytesVal\x12\x16\n" +
	"\x06custom\x18\b \x01(\tR\x06custom\"d\n" +
	"\x04Type\x12\x10\n" +
	"\fDNSQueryType\x10\x01\x12\x13\n" +
	"\x0fDNSResponseType\x10\x02\x12\x18\n" +
	"\x14DNSOutgoingQueryType\x10\x03\x12\x1b\n" +
	"\x17DNSIncomingResponseType\x10\x04\"#\n" +
	"\fSocketFamily\x12\b\n" +
	"\x04INET\x10\x01\x12\t\n" +
	"\x05INET6\x10\x02\"_\n" +
	"\x0eSocketProtocol\x12\a\n" +
	"\x03UDP\x10\x01\x12\a\n" +
	"\x03TCP\x10\x02\x12\a\n" +
	"\x03DOT\x10\x03\x12\a\n" +
	"\x03DOH\x10\x04\x12\x0f\n" +
	"\vDNSCryptUDP\x10\x05\x12\x0f\n" +
	"\vDNSCryptTCP\x10\x06\x12\a\n" +
	"\x03DOQ\x10\a\".\n" +
	"\vHTTPVersion\x12\t\n" +
	"\x05HTTP1\x10\x01\x12\t\n" +
	"\x05HTTP2\x10\x02\x12\t\n" +
	"\x05HTTP3\x10\x03\"Y\n" +
	"\n" +
	"PolicyType\x12\v\n" +
	"\aUNKNOWN\x10\x01\x12\t\n" +
	"\x05QNAME\x10\x02\x12\f\n" +
	"\bCLIENTIP\x10\x03\x12\x0e\n" +
	"\n" +
	"RESPONSEIP\x10\x04\x12\v\n" +
	"\aNSDNAME\x10\x05\x12\b\n" +
	"\x04NSIP\x10\x06\"X\n" +
	"\n" +
	"PolicyKind\x12\f\n" +
	"\bNoAction\x10\x01\x12\b\n" +
	"\x04Drop\x10\x02\x12\f\n" +
	"\bNXDOMAIN\x10\x03\x12\n" +
	"\n" +
	"\x06NODATA\x10\x04\x12\f\n" +
	"\bTruncate\x10\x05\x12\n" +
	"\n" +
	"\x06Custom\x10\x06\"\xcd\x03\n" +
	"\x06VState\x12\x11\n" +
	"\rIndeterminate\x10\x01\x12\f\n" +
	"\bInsecure\x10\x02\x12\n" +
	"\n" +
	"\x06Secure\x10\x03\x12\x16\n" +
	"\x12BogusNoValidDNSKEY\x10\x04\x12\x16\n" +
	"\x12BogusInvalidDenial\x10\x05\x12\x17\n" +
	"\x13BogusUnableToGetDSs\x10\x06\x12\x1b\n" +
	"\x17BogusUnableToGetDNSKEYs\x10\a\x12\x15\n" +
	"\x11BogusSelfSignedDS\x10\b\x12\x10\n" +
	"\fBogusNoRRSIG\x10\t\x12\x15\n" +
	"\x11BogusNoValidRRSIG\x10\n" +
	"\x12\"\n" +
	"\x1eBogusMissingNegativeIndication\x10\v\x12\x1d\n" +
	"\x19BogusSignatureNotYetValid\x10\f\x12\x19\n" +
	"\x15BogusSignatureExpired\x10\r\x12\x1e\n" +
	"\x1aBogusUnsupportedDNSKEYAlgo\x10\x0e\x12 \n" +
	"\x1cBogusUnsupportedDSDigestType\x10\x0f\x12\x18\n" +
	"\x14BogusNoZoneKeyBitSet\x10\x10\x12\x16\n" +
	"\x12BogusRevokedDNSKEY\x10\x11\x12\x1e\n" +
	"\x1aBogusInvalidDNSKEYProtocol\x10\x12\"\x8a\x02\n" +
	"\tEventType\x12\x0f\n" +
	"\vCustomEvent\x10\x00\x12\v\n" +
	"\aReqRecv\x10\x01\x12\x0f\n" +
	"\vPCacheCheck\x10\x02\x12\x0e\n" +
	"\n" +
	"AnswerSent\x10\x03\x12\v\n" +
	"\aSyncRes\x10d\x12\r\n" +
	"\tLuaGetTag\x10e\x12\x10\n" +
	"\fLuaGetTagFFI\x10f\x12\x0f\n" +
	"\vLuaIPFilter\x10g\x12\r\n" +
	"\tLuaPreRPZ\x10h\x12\x11\n" +
	"\rLuaPreResolve\x10i\x12\x12\n" +
	"\x0eLuaPreOutQuery\x10j\x12\x12\n" +
	"\x0eLuaPostResolve\x10k\x12\r\n" +
	"\tLuaNoData\x10l\x12\x0f\n" +
	"\vLuaNXDomain\x10m\x12\x15\n" +
	"\x11LuaPostResolveFFI\x10n\"3\n" +
	"\x10PBDNSMessageList\x12\x1f\n" +
	"\x03msg\x18\x01 \x03(\v2\r.PBDNSMessageR\x03msgB<Z:github.com/dmachard/go-powerdns-protobuf;powerdns_protobuf"

var (
	file_dnsmessage_proto_rawDescOnce sync.Once
	file_dnsmessage_proto_rawDescData []byte
)

func file_dnsmessage_proto_rawDescGZIP() []byte {
	file_dnsmessage_proto_rawDescOnce.Do(func() {
		file_dnsmessage_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dnsmessage_proto_rawDesc), len(file_dnsmessage_proto_rawDesc)))
	})
	return file_dnsmessage_proto_rawDescData
}

var file_dnsmessage_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_dnsmessage_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_dnsmessage_proto_goTypes = []any{
	(PBDNSMessage_Type)(0),                 // 0: PBDNSMessage.Type
	(PBDNSMessage_SocketFamily)(0),         // 1: PBDNSMessage.SocketFamily
	(PBDNSMessage_SocketProtocol)(0),       // 2: PBDNSMessage.SocketProtocol
	(PBDNSMessage_HTTPVersion)(0),          // 3: PBDNSMessage.HTTPVersion
	(PBDNSMessage_PolicyType)(0),           // 4: PBDNSMessage.PolicyType
	(PBDNSMessage_PolicyKind)(0),           // 5: PBDNSMessage.PolicyKind
	(PBDNSMessage_VState)(0),               // 6: PBDNSMessage.VState
	(PBDNSMessage_EventType)(0),            // 7: PBDNSMessage.EventType
	(*PBDNSMessage)(nil),                   // 8: PBDNSMessage
	(*PBDNSMessageList)(nil),               // 9: PBDNSMessageList
	(*PBDNSMessage_DNSQuestion)(nil),       // 10: PBDNSMessage.DNSQuestion
	(*PBDNSMessage_DNSResponse)(nil),       // 11: PBDNSMessage.DNSResponse
	(*PBDNSMessage_MetaValue)(nil),         // 12: PBDNSMessage.MetaValue
	(*PBDNSMessage_Meta)(nil),              // 13: PBDNSMessage.Meta
	(*PBDNSMessage_Event)(nil),             // 14: PBDNSMessage.Event
	(*PBDNSMessage_DNSResponse_DNSRR)(nil), // 15: PBDNSMessage.DNSResponse.DNSRR
}
var file_dnsmessage_proto_depIdxs = []int32{
	0,  // 0: PBDNSMessage.type:type_name -> PBDNSMessage.Type
	1,  // 1: PBDNSMessage.socketFamily:type_name -> PBDNSMessage.SocketFamily
	2,  // 2: PBDNSMessage.socketProtocol:type_name -> PBDNSMessage.SocketProtocol
	10, // 3: PBDNSMessage.question:type_name -> PBDNSMessage.DNSQuestion
	11, // 4: PBDNSMessage.response:type_name -> PBDNSMessage.DNSResponse
	13, // 5: PBDNSMessage.meta:type_name -> PBDNSMessage.Meta
	14, // 6: PBDNSMessage.trace:type_name -> PBDNSMessage.Event
	3,  // 7: PBDNSMessage.httpVersion:type_name -> PBDNSMessage.HTTPVersion
	8,  // 8: PBDNSMessageList.msg:type_name -> PBDNSMessage
	15, // 9: PBDNSMessage.DNSResponse.rrs:type_name -> PBDNSMessage.DNSResponse.DNSRR
	4,  // 10: PBDNSMessage.DNSResponse.appliedPolicyType:type_name -> PBDNSMessage.PolicyType
	5,  // 11: PBDNSMessage.DNSResponse.appliedPolicyKind:type_name -> PBDNSMessage.PolicyKind
	6,  // 12: PBDNSMessage.DNSResponse.validationState:type_name -> PBDNSMessage.VState
	12, // 13: PBDNSMessage.Meta.value:type_name -> PBDNSMessage.MetaValue
	7,  // 14: PBDNSMessage.Event.event:type_name -> PBDNSMessage.EventType
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_dnsmessage_proto_init() }
func file_dnsmessage_proto_init() {
	if File_dnsmessage_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dnsmessage_proto_rawDesc), len(file_dnsmessage_proto_rawDesc)),
			NumEnums:      8,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dnsmessage_proto_goTypes,
		DependencyIndexes: file_dnsmessage_proto_depIdxs,
		EnumInfos:         file_dnsmessage_proto_enumTypes,
		MessageInfos:      file_dnsmessage_proto_msgTypes,
	}.Build()
	File_dnsmessage_proto = out.File
	file_dnsmessage_proto_goTypes = nil
	file_dnsmessage_proto_depIdxs = nil
}
